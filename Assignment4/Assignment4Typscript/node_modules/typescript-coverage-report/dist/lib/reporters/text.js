"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.generate = void 0;
var terminal_table_1 = __importDefault(require("terminal-table"));
require("colors");
var coverageTable = new terminal_table_1["default"]({
    leftPadding: 1,
    rightPadding: 1,
    borderStyle: 2
});
var calculatePercantage = function (correct, total) {
    if (total === 0) {
        return 100;
    }
    return (correct * 100) / total;
};
var calculatePercantageWithString = function (correct, total) {
    return calculatePercantage(correct, total).toFixed(2) + "%";
};
var generate = function (_a, threshold) {
    var fileCounts = _a.fileCounts, percentage = _a.percentage, total = _a.total, covered = _a.covered, uncovered = _a.uncovered;
    var row = 1;
    var headers = [
        "filenames" + (" (" + fileCounts.size + ")").gray,
        "percent" + (" (" + percentage.toFixed(2) + "%)").gray,
        "total" + (" (" + total + ")").gray,
        "covered" + (" (" + covered + ")").gray,
        "uncovered" + (" (" + uncovered + ")").gray
    ];
    coverageTable.push(headers, headers.map(function () { return "---".gray; }));
    coverageTable.attrRange({ column: [1, 5] }, {
        align: "right"
    });
    fileCounts.forEach(function (_a, filename) {
        var totalCount = _a.totalCount, correctCount = _a.correctCount;
        row++;
        coverageTable.push([
            filename,
            calculatePercantageWithString(correctCount, totalCount),
            totalCount,
            correctCount,
            totalCount - correctCount
        ]);
        coverageTable.attrRange({ row: [row] }, {
            color: Math.floor(calculatePercantage(correctCount, totalCount)) >=
                threshold
                ? "green"
                : "red"
        });
    });
    return "" + coverageTable;
};
exports.generate = generate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvcmVwb3J0ZXJzL3RleHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsa0VBQW1DO0FBRW5DLGtCQUFnQjtBQUVoQixJQUFNLGFBQWEsR0FBRyxJQUFJLDJCQUFLLENBQUM7SUFDOUIsV0FBVyxFQUFFLENBQUM7SUFDZCxZQUFZLEVBQUUsQ0FBQztJQUNmLFdBQVcsRUFBRSxDQUFDO0NBQ2YsQ0FBQyxDQUFDO0FBRUgsSUFBTSxtQkFBbUIsR0FBRyxVQUFDLE9BQWUsRUFBRSxLQUFhO0lBQ3pELElBQUksS0FBSyxLQUFLLENBQUMsRUFBRTtRQUNmLE9BQU8sR0FBRyxDQUFDO0tBQ1o7SUFFRCxPQUFPLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztBQUNqQyxDQUFDLENBQUM7QUFFRixJQUFNLDZCQUE2QixHQUFHLFVBQ3BDLE9BQWUsRUFDZixLQUFhO0lBRWIsT0FBVSxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFHLENBQUM7QUFDOUQsQ0FBQyxDQUFDO0FBRUssSUFBTSxRQUFRLEdBQUcsVUFDdEIsRUFBbUUsRUFDbkUsU0FBaUI7UUFEZixVQUFVLGdCQUFBLEVBQUUsVUFBVSxnQkFBQSxFQUFFLEtBQUssV0FBQSxFQUFFLE9BQU8sYUFBQSxFQUFFLFNBQVMsZUFBQTtJQUduRCxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDWixJQUFNLE9BQU8sR0FBRztRQUNkLFdBQVcsR0FBRyxDQUFBLE9BQUssVUFBVSxDQUFDLElBQUksTUFBRyxDQUFBLENBQUMsSUFBSTtRQUMxQyxTQUFTLEdBQUcsQ0FBQSxPQUFLLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQUksQ0FBQSxDQUFDLElBQUk7UUFDL0MsT0FBTyxHQUFHLENBQUEsT0FBSyxLQUFLLE1BQUcsQ0FBQSxDQUFDLElBQUk7UUFDNUIsU0FBUyxHQUFHLENBQUEsT0FBSyxPQUFPLE1BQUcsQ0FBQSxDQUFDLElBQUk7UUFDaEMsV0FBVyxHQUFHLENBQUEsT0FBSyxTQUFTLE1BQUcsQ0FBQSxDQUFDLElBQUk7S0FDckMsQ0FBQztJQUVGLGFBQWEsQ0FBQyxJQUFJLENBQ2hCLE9BQU8sRUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLGNBQU0sT0FBQSxLQUFLLENBQUMsSUFBSSxFQUFWLENBQVUsQ0FBQyxDQUM5QixDQUFDO0lBRUYsYUFBYSxDQUFDLFNBQVMsQ0FDckIsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFDbEI7UUFDRSxLQUFLLEVBQUUsT0FBTztLQUNmLENBQ0YsQ0FBQztJQUVGLFVBQVUsQ0FBQyxPQUFPLENBQ2hCLFVBQ0UsRUFHK0MsRUFDL0MsUUFBZ0I7WUFIZCxVQUFVLGdCQUFBLEVBQ1YsWUFBWSxrQkFBQTtRQUlkLEdBQUcsRUFBRSxDQUFDO1FBRU4sYUFBYSxDQUFDLElBQUksQ0FBQztZQUNqQixRQUFRO1lBQ1IsNkJBQTZCLENBQUMsWUFBWSxFQUFFLFVBQVUsQ0FBQztZQUN2RCxVQUFVO1lBQ1YsWUFBWTtZQUNaLFVBQVUsR0FBRyxZQUFZO1NBQzFCLENBQUMsQ0FBQztRQUVILGFBQWEsQ0FBQyxTQUFTLENBQ3JCLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFDZDtZQUNFLEtBQUssRUFDSCxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxVQUFVLENBQUMsQ0FBQztnQkFDekQsU0FBUztnQkFDUCxDQUFDLENBQUMsT0FBTztnQkFDVCxDQUFDLENBQUMsS0FBSztTQUNaLENBQ0YsQ0FBQztJQUNKLENBQUMsQ0FDRixDQUFDO0lBRUYsT0FBTyxFQUFFLEdBQUcsYUFBYSxDQUFDO0FBQzVCLENBQUMsQ0FBQztBQXpEVyxRQUFBLFFBQVEsWUF5RG5CIn0=